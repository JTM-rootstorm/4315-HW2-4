/* modified from https://github.com/bingmann/flex-bison-cpp-example/blob/master/src/scanner.ll */

%{
    /* C++ string header, for string ops below */
    #include <string>

    /* Implementation of yyFlexScanner */
    #include "../scanner.hpp"
    #undef YY_DECL
    #define YY_DECL int Py::Scanner::yylex(Py::Parser::semantic_type * const lval, Py::Parser::location_type *location)

    typedef Py::Parser::token token;
    typedef Py::Parser::token_type token_type;

    #define yyterminate() return token::END

    #define YY_NO_UNISTD_H

    #define YY_USER_ACTION yylloc->columns(yyleng);
%}

%option c++
%option yyclass="Py::Scanner"
%option batch
%option debug
%option noyywrap nounput
%option stack

%x comment

%%
%{
    yylval = lval;
    yylloc->step();
%}

"# "[^\n]*  /* consume comments */

(\"[^\n]\") {
    yylval->build<std::string>(yytext);
    return token::STRING;
}

[0-9]+ {
    yylval->build<int>(atoi(yytext));
    return token::INTEGER;
}

[Tt]rue|[Ff]alse {
    yylval->build<bool>(yytext);
    return token::BOOLEAN;
}

[ \t\r]+ {
    yylloc->step();
}

print {
    return token::PYFUNCTION;
}

if|for {
    return token::KEYWORD;
}

(def[ ]+[A-Za-z_]+[\w]+) {
    yylval->build<std::string>(yytext);
    return token::DEFFUNCTION;
}

(\((([^\n])+(,[^\n])*)*\)): {
    yylval->build<std::string>(yytext);
    return token::FUNCSIG;
}

([A-Za-z_]+[A-Za-z0-9_]*) {
    yylval->build<std::string>(yytext);
    return token::VARIABLE;
}

\n {
    yylloc->lines(yyleng);
    yylloc->step();
    return token::EOL;
}

. { // have bison eat the rest
    return static_cast<token_type>(*yytext);
}

%%