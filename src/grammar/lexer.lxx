/* modified from https://github.com/bingmann/flex-bison-cpp-example/blob/master/src/scanner.ll */

%{
    /* C++ string header, for string ops below */
    #include <string>
    #include <iostream>
    #include <boost/algorithm/string.hpp>

    #include "../py/pyenvironment.hpp"

    /* Implementation of yyFlexScanner */
    #include "../scanner.hpp"
    #undef YY_DECL
    #define YY_DECL int Py::Scanner::yylex(Py::Parser::semantic_type * const lval, Py::Parser::location_type *location)

    typedef Py::Parser::token token;
    typedef Py::Parser::token_type token_type;

    #define yyterminate() return token::END

    #define YY_NO_UNISTD_H

    #define YY_USER_ACTION yylloc->columns(yyleng);
%}

%option c++
%option yyclass="Py::Scanner"
%option batch
%option noyywrap nounput
%option stack

%x DEFFUNC IFDEFINE

FUNCDEF         def[ ]+[A-Za-z_]+[\w]+\(.*\)\:\n("   ".+\n("   ".+\n)*((\n)?)+)+
FUNCDECL        def[ ]+
FUNCSIG         [A-Za-z_]+([A-Za-z0-9_]+)?\(.*\):\n
FUNCBOD         ("   ".+)\n(("   ")("   ")+.+\n)*
FUNCTAIL        ("   ".+\n("   ".+(\n)?)*((\n)?)+)+
FUNCCALL        [A-Za-z_]+([A-Za-z0-9_]+)?\(.*\)
MAINIF          if[ ]+
IFEXPR          .+\:(\n)
IFELSE          else([ ]+)?\n
IFBODY          (("   ".+)((\n)?)+)+
IFEND           (("   ".+)((\n\n))+)+

%%
%{
    yylval = lval;
    yylloc->step();
%}

"# "[^\n]*  /* consume comments */

{FUNCDECL} {
    BEGIN(DEFFUNC);
}

<DEFFUNC>{FUNCSIG} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
}

<DEFFUNC>{FUNCTAIL} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
    PyEnvironment::Instance().buildFunction();
    BEGIN(INITIAL);
}

{FUNCCALL} {
    yylval->build<std::string>(yytext);
    return token::FUNCCALL;
}

\".*\" {
    yylval->build<std::string>(yytext);
    return token::STRING;
}

{MAINIF} {
    BEGIN(IFDEFINE);
}

<IFDEFINE>{IFEXPR} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
}

<IFDEFINE>{IFELSE} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
}

<IFDEFINE>{IFEND} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
    PyEnvironment::Instance().constructMainIf();
    BEGIN(INITIAL);
}

<IFDEFINE>{IFBODY} {
    PyEnvironment::Instance().lexxerQueue.push_back(boost::any(std::string(yytext)));
}

"==" {
    yylval->build<std::string>(yytext);
    return token::BOOLEQ;
}

"!=" {
    yylval->build<std::string>(yytext);
    return token::BOOLNEQ;
}

"&&"|and {
    yylval->build<std::string>(yytext);
    return token::BOOLAND;
}

"||"|or {
    yylval->build<std::string>(yytext);
    return token::BOOLOR;
}

"<=" {
    yylval->build<std::string>(yytext);
    return token::BOOLLTEQ;
}

">=" {
    yylval->build<std::string>(yytext);
    return token::BOOLGTEQ;
}

[0-9]+ {
    yylval->build<int>(atoi(yytext));
    return token::INTEGER;
}

[Tt]rue|[Ff]alse {
    std::string temp = std::string(yytext);
    boost::algorithm::to_lower(temp);

    if (temp == "true") {
        yylval->build<int>(1);
    }
    else if (temp == "false") {
        yylval->build<int>(0);
    }

    return token::INTEGER;
}

[A-Za-z_]+[A-Za-z0-9_]* {
    yylval->build<std::string>(yytext);
    return token::VARIABLE;
}

[ \t\r]+ {
    yylloc->step();
}

\n {
    yylloc->lines(yyleng);
    return token::EOL;
}

. { // have bison eat the rest
    return static_cast<token_type>(*yytext);
}

%%