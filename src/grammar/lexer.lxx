/* modified from https://github.com/bingmann/flex-bison-cpp-example/blob/master/src/scanner.ll */

%{
    /* C++ string header, for string ops below */
    #include <iostream>
    #include <string>

    /* Implementation of yyFlexScanner */
    #include "../scanner.hpp"
    #undef YY_DECL
    #define YY_DECL int Py::Scanner::yylex(Py::Parser::semantic_type * const lval, Py::Parser::location_type *location)

    typedef Py::Parser::token token;
    typedef Py::Parser::token_type token_type;

    #define yyterminate() return token::END

    #define YY_NO_UNISTD_H

    #define YY_USER_ACTION yylloc->columns(yyleng);
%}

%option c++
%option yyclass="Py::Scanner"
%option batch
%option noyywrap nounput
%option stack

%x DEFFUNC

FUNCDEF         def[ ]+[A-Za-z_]+[\w]+\(.*\)\:\n("   ".+\n("   ".+\n)*((\n)?)+)+
FUNCDECL        def[ ]+
FUNCSIG         [A-Za-z_]+[A-Za-z0-9_]+\(.*\):\n
FUNCBOD         ("   ".+)\n(("   ")("   ")+.+\n)*
FUNCTAIL        ("   ".+\n("   ".+\n)*((\n)?)+)+

%%
%{
    yylval = lval;
    yylloc->step();
%}

"# "[^\n]*  /* consume comments */

{FUNCDECL} {
    std::cout << "yep" << std::endl;
    BEGIN(DEFFUNC);
}

<DEFFUNC>{FUNCSIG} {
    std::cout << "the sig" << std::endl;
}

<DEFFUNC>{FUNCTAIL} {
    std::cout << "Found end" << std::endl;
    std::cout << yytext << std::endl;
    BEGIN(INITIAL);
}

\".*\" {
    std::cout << "Found string: " << yytext << std::endl;
}

\n {

}

. { // have bison eat the rest
    // return static_cast<token_type>(*yytext);
}

%%