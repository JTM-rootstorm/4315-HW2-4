/* Modified from http://www.jonathanbeard.io/tutorials/FlexBisonC++ and
 * https://github.com/bingmann/flex-bison-cpp-example/blob/master/src/parser.yy */

%skeleton "lalr1.cc"
%require  "3.0"
%debug
%start start
%defines
%define api.namespace {Py}
%define parser_class_name {Parser}

%code requires{
   namespace Py {
      class Driver;
      class Scanner;
   }

   class BaseExpressionNode;
   class PyFunction;

// The following definitions is missing when %locations isn't used
# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

}

%parse-param { Scanner  &scanner  }
%parse-param { Driver  &driver  }

%code{
   #include <iostream>
   #include <cstdlib>
   #include <fstream>
   #include <string>

   /* include for all driver functions */
   #include "../driver.hpp"

   #include "../py/pyenvironment.hpp"

#undef yylex
#define yylex scanner.yylex
}
%define api.value.type variant
%define parse.assert

%locations
%initial-action {
    @$.begin.filename = @$.end.filename = &driver.streamName;
}

%token                  END    0     "end of file"
%token                  EOL          "end of line"
%token <int>            INTEGER      "integer"
%token <bool>           BOOLEAN      "boolean"
%token <std::string>    STRING       "string"
%token <std::string>    VARIABLE     "variable"
%token <std::string>    PYFUNCTION   "built-in function"
%token <std::string>    DEFFUNCTION  "user-defined function"
%token <std::string>    FUNCSIG      "function signature"
%token <std::string>    KEYWORD      "keyword"

%type <class BaseExpressionNode*>     constant variable
%type <class BaseExpressionNode*>     atomexpr powerexpr unaryexpr mulexpr addexpr expr

%destructor { delete $$; } constant variable
%destructor { delete $$; } atomexpr powerexpr unaryexpr mulexpr addexpr expr

%type <class BaseExpressionNode*>     logicalcompare logicaleq logicaland logicalor

%destructor { delete $$; } logicalcompare logicaleq logicaland logicalor

%%

constant : INTEGER {
    $$ = new ExprConstant($1);
} | BOOLEAN {
    $$ = new BoolExprConstant($1);
}

variable : VARIABLE {
    PyObject *pyObject = PyEnvironment::Instance().getGlobalVariable($1);

    if (pyObject != nullptr) {
        switch( pyObject->type ) {
            case PyConstants::VarTypes::NUMBER: {
                    mpz_int val = pyObject->getData<mpz_int>();
                    $$ = new ExprConstant(val);
                    break;
            }
            case PyConstants::VarTypes::BOOL: {
                    bool val = pyObject->getData<bool>();
                    $$ = new BoolExprConstant(val);
                    break;
            }
            case PyConstants::VarTypes::NONE: {
                    PyEnvironment::Instance().pyConsole.logError(PyErrors::NameError, $1.c_str());
                    break;
            }
            default:
                    // TODO: throw an error here or something
                    break;
        }

        pyObject = nullptr;
    }
    else {
        // TODO: throw error
    }
}

atomexpr : constant {
            $$ = $1;
         }
         | variable {
            $$ = $1;
         }
         | '(' expr ')' {
            $$ = $2;
         }

powerexpr : atomexpr {
            $$ = $1;
          }
          | atomexpr '^' powerexpr {
            $$ = new ExprPow($1, $3);
          }

unaryexpr : powerexpr {
            $$ = $1;
          }
          | '+' powerexpr {
            $$ = $2;
          }
          | '-' powerexpr {
            $$ = new ExprNegate($2);
          }
          | '!' powerexpr {
            $$ = new BoolExprNot($2);
          }

mulexpr   : unaryexpr {
            $$ = $1;
          }
          | mulexpr '*' unaryexpr {
            $$ = new ExprMultDiv($1, $3);
          }
          | mulexpr '/' unaryexpr {
            $$ = new ExprMultDiv($1, $3, true);
          }
          | mulexpr '%' unaryexpr {
            $$ = new ExprModulo($1, $3);
          }

addexpr   : mulexpr {
            $$ = $1;
          }
          | addexpr '+' mulexpr {
            $$ = new ExprAddSub($1, $3);
          }
          | addexpr '-' mulexpr {
            $$ = new ExprAddSub($1, $3, true);
          }

logicalcompare : addexpr {
                 $$ = $1;
               }
               | addexpr "<" addexpr {
                 $$ = new BoolExprLessThan($1, $3);
               }
               | addexpr "<=" addexpr {
                 $$ = new BoolExprLessThan($1, $3, true);
               }
               | addexpr ">" addexpr {
                 $$ = new BoolExprGreaterThan($1, $3);
               }
               | addexpr ">=" addexpr {
                 $$ = new BoolExprGreaterThan($1, $3, true);
               }

logicaleq : logicalcompare {
            $$ = $1;
          }
          | logicalcompare "==" logicalcompare {
            $$ = new BoolExprEq($1, $3);
          }
          | logicalcompare "!=" logicalcompare {
            $$ = new BoolExprNotEq($1, $3);
          }

logicaland : logicaleq {
             $$ = $1;
           }
           | logicaleq "&&" logicaleq {
             $$ = new BoolExprAnd($1, $3);
           }

logicalor : logicaland {
            $$ = $1;
          }
          | logicaland "||" logicaland {
            $$ = new BoolExprOr($1, $3);
          }

expr      : logicalor {
            $$ = $1;
          }

assignment : VARIABLE '=' expr {
             auto type = $3->evaluate()->type;
             boost::any val;

             switch ( type ) {
                case PyConstants::VarTypes::NUMBER: {
                    val = boost::any($3->evaluate()->getData<mpz_int>());
                    break;
                }
                case PyConstants::VarTypes::BOOL: {
                    val = boost::any($3->evaluate()->getData<bool>());
                    break;
                }
                default:
                    // TODO: error or something
                    break;
             }

             PyEnvironment::Instance().setGlobalVar($1, val, type);

             delete $3;
           }
           | VARIABLE '=' STRING {
             PyString pyString(std::string($3));

             PyEnvironment::Instance().setGlobalVar($1, pyString);
           }

pyfunction : PYFUNCTION FUNCSIG {
             // nothing yet
          }

start     : %empty
          | start EOL
          | start assignment END
          | start expr END {
            PyEnvironment::Instance().exprContext.expressions.push_back($2);
          }
          | start assignment EOL
          | start expr EOL {
            PyEnvironment::Instance().exprContext.expressions.push_back($2);
          }
          | start pyfunction EOL
          | start pyfunction END


%%


void Py::Parser::error( const Parser::location_type &l, const std::string &err_message ) {
   std::cerr << "Error: " << err_message << " at " << l << "\n";
}