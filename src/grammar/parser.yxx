/* Modified from http://www.jonathanbeard.io/tutorials/FlexBisonC++ and
 * https://github.com/bingmann/flex-bison-cpp-example/blob/master/src/parser.yy */

%skeleton "lalr1.cc"
%require  "3.0"
%start start
%defines
%define api.namespace {Py}
%define parser_class_name {Parser}

%code requires{
   namespace Py {
      class Driver;
      class Scanner;
   }

   class BaseExpressionNode;
   class PyFunction;

// The following definitions is missing when %locations isn't used
# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

}

%parse-param { Scanner  &scanner  }
%parse-param { Driver  &driver  }

%code{
   #include <iostream>
   #include <cstdlib>
   #include <fstream>
   #include <string>

   /* include for all driver functions */
   #include "../driver.hpp"

   #include "../py/pyenvironment.hpp"

#undef yylex
#define yylex scanner.yylex
}
%define api.value.type variant
%define parse.assert

%locations
%initial-action {
    @$.begin.filename = @$.end.filename = &driver.streamName;
}

%token                  END    0     "end of file"
%token                  EOL          "end of line"
%token <int>            INTEGER      "integer"
%token <bool>           BOOLEAN      "boolean"
%token <std::string>    STRING       "string"
%token <std::string>    VARIABLE     "variable"
%token <std::string>    FUNCCALL     "function call"

%token <std::string>    BOOLEQ       "=="
%token <std::string>    BOOLNEQ      "!="
%token <std::string>    BOOLLTEQ     "<="
%token <std::string>    BOOLGTEQ     ">="
%token <std::string>    BOOLAND      "and, &&"
%token <std::string>    BOOLOR       "or, ||"

%token <std::string>    LPARENS      "("
%token <std::string>    RPARENS      ")"

%type <class BaseExpressionNode*>     constant variable
%type <class BaseExpressionNode*>     atomexpr powerexpr unaryexpr mulexpr addexpr expr

// %destructor { delete $$; } constant variable
// %destructor { delete $$; } atomexpr powerexpr unaryexpr mulexpr addexpr expr

%type <class BaseExpressionNode*>     logicalcompare logicaleq logicaland logicalor

// %destructor { delete $$; } logicalcompare logicaleq logicaland logicalor

%%

constant : INTEGER {
    $$ = new ExprConstant($1);
} | BOOLEAN {
    $$ = new BoolExprConstant($1);
} | STRING {
    $$ = new BaseStringNode($1);
} | FUNCCALL {

    PyEnvironment::Instance().runFunction($1);

    if (!PyEnvironment::Instance().funcReturnStack.empty()) {
        std::shared_ptr<PyObject> pyObject = PyEnvironment::Instance().funcReturnStack.top();
        PyEnvironment::Instance().funcReturnStack.pop();

        // TODO handle string types maybe, but throw errors if math gets done with them
        switch ( pyObject->type ) {
            case PyConstants::VarTypes::NUMBER: {
                $$ = new ExprConstant(pyObject->getData<int>());
                break;
            }
            case PyConstants::VarTypes::STRING: {
                $$ = new BaseStringNode(pyObject->getData<std::string>());
                break;
            }
            case PyConstants::VarTypes::BOOL: {
                $$ = new BoolExprConstant(pyObject->getData<bool>());
                break;
            }
            default: {
                $$ = nullptr;
                break;
            }
        }
    }
    else {
        $$ = nullptr;
    }
}

variable : VARIABLE {
    std::shared_ptr<PyObject> pyObject = PyEnvironment::Instance().getVar($1);

    if (pyObject != nullptr) {
        switch( pyObject->type ) {
            case PyConstants::VarTypes::NUMBER: {
                    int val = pyObject->getData<int>();
                    $$ = new ExprConstant(val);
                    break;
            }
            case PyConstants::VarTypes::BOOL: {
                    bool val = pyObject->getData<bool>();
                    $$ = new BoolExprConstant(val);
                    break;
            }
            case PyConstants::VarTypes::STRING: {
                std::string val = pyObject->getData<std::string>();
                $$ = new BaseStringNode(val);
                break;
            }
            case PyConstants::VarTypes::NONE: {
                    PyEnvironment::Instance().pyConsole.logError(PyErrors::NameError, $1.c_str());
                    break;
            }
            default:
                    // TODO: throw an error here or something
                    break;
        }
    }
    else {
        // TODO: throw error
    }
}

atomexpr : constant {
            $$ = $1;
         }
         | variable {
            $$ = $1;
         }
         | LPARENS expr RPARENS {
            $$ = $2;
         }

powerexpr : atomexpr {
            $$ = $1;
          }
          | atomexpr '^' powerexpr {
            $$ = new ExprPow($1, $3);
          }

unaryexpr : powerexpr {
            $$ = $1;
          }
          | '+' powerexpr {
            $$ = $2;
          }
          | '-' powerexpr {
            $$ = new ExprNegate($2);
          }
          | '!' powerexpr {
            $$ = new BoolExprNot($2);
          }

mulexpr   : unaryexpr {
            $$ = $1;
          }
          | mulexpr '*' unaryexpr {
            $$ = new ExprMultDiv($1, $3);
          }
          | mulexpr '/' unaryexpr {
            $$ = new ExprMultDiv($1, $3, true);
          }
          | mulexpr '%' unaryexpr {
            $$ = new ExprModulo($1, $3);
          }

addexpr   : mulexpr {
            $$ = $1;
          }
          | addexpr '+' mulexpr {
            $$ = new ExprAddSub($1, $3);
          }
          | addexpr '-' mulexpr {
            $$ = new ExprAddSub($1, $3, true);
          }

logicalcompare : addexpr {
                 $$ = $1;
               }
               | addexpr '<' addexpr {
                 $$ = new BoolExprLessThan($1, $3);
               }
               | addexpr BOOLLTEQ addexpr {
                 $$ = new BoolExprLessThan($1, $3, true);
               }
               | addexpr '>' addexpr {
                 $$ = new BoolExprGreaterThan($1, $3);
               }
               | addexpr BOOLGTEQ addexpr {
                 $$ = new BoolExprGreaterThan($1, $3, true);
               }

logicaleq : logicalcompare {
            $$ = $1;
          }
          | logicalcompare BOOLEQ logicalcompare {
            $$ = new BoolExprEq($1, $3);
          }
          | logicalcompare BOOLNEQ logicalcompare {
            $$ = new BoolExprNotEq($1, $3);
          }

logicaland : logicaleq {
             $$ = $1;
           }
           | logicaleq BOOLAND logicaleq {
             $$ = new BoolExprAnd($1, $3);
           }

logicalor : logicaland {
            $$ = $1;
          }
          | logicaland BOOLOR logicaland {
            $$ = new BoolExprOr($1, $3);
          }

expr      : logicalor {
            $$ = $1;
          }

assignment : VARIABLE '=' expr {
             std::shared_ptr<PyObject> pyObject = $3->evaluate();

             auto type = pyObject->type;
             boost::any val;

             switch ( type ) {
                case PyConstants::VarTypes::NUMBER: {
                    val = boost::any(pyObject->getData<int>());
                    break;
                }
                case PyConstants::VarTypes::BOOL: {
                    val = boost::any(pyObject->getData<bool>());
                    break;
                }
                case PyConstants::VarTypes::STRING: {
                    val = boost::any(pyObject->getData<std::string>());
                    break;
                }
                default:
                    // TODO: error or something
                    break;
             }

             PyEnvironment::Instance().setVar($1, val, type);

             delete $3;
           }

start     : %empty
          | start EOL
          | start assignment END
          | start expr END {
            PyEnvironment::Instance().exprContext.expressions.push_back($2);
          }
          | start assignment EOL
          | start expr EOL {
            PyEnvironment::Instance().exprContext.expressions.push_back($2);
          }


%%


void Py::Parser::error( const Parser::location_type &l, const std::string &err_message ) {
   std::cerr << "Error: " << err_message << " at " << l << "\n";
}